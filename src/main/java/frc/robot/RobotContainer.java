
package frc.robot;

import frc.robot.Constants.XboxConstants;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.Field2d;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.kauailabs.navx.frc.*;
import edu.wpi.first.wpilibj.SPI;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.ConditionalCommand;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.PrintCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.WaitCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;

public class RobotContainer {
  //AHRS ahrs = new AHRS(SPI.Port.kMXP);
  private static RobotContainer m_robotContainer = new RobotContainer();
  // The robot's subsystems
  public final Drivetrain m_drivetrain = new Drivetrain();

  public final Field2d m_field = new Field2d();

  // Joysticks
  private final XboxController xboxController1 = new XboxController(0);

  // Arm Commands
  // public static ArmUp armup = new ArmUp

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  private RobotContainer() {
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_drivetrain);
    // SmartDashboard.putData(m_arm);
    
    // SmartDashboard Buttons
    // SmartDashboard.putData("ArcadeDrive", new ArcadeDrive());
   

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();


    

    m_drivetrain.setDefaultCommand(new ArcadeDrive(m_drivetrain,
        () -> -xboxController1.getRawAxis(XboxConstants.LEFT_STICK_Y),
        () -> xboxController1.getRawAxis(XboxConstants.RIGHT_STICK_X)));
    // m_arm.setDefaultCommand(new ArmMovement(m_arm, 0));


    CommandBase position1=  new SequentialCommandGroup(
      //new ArmUp(m_armSystem),

      new Autonomous(-0.25, 4, m_drivetrain),
      new Autonomous(0, 10, m_drivetrain)
  );
  m_chooser.addOption("position1", position1);

  // CommandBase position2=  new SequentialCommandGroup(
  //   new ArmDown(m_armSystem),
  //   new Autonomous(0.5, 1, m_drivetrain),
  //   new ParallelCommandGroup(

  //     new Autonomous(0.1, 0.5, m_drivetrain),


  //     new BallSuckSpit(m_intake, 1.0)
  //   ),
  //   new Autonomous(-0.5, 2, m_drivetrain),
  //   new TurnNdegrees(-135, m_drivetrain),
  //   new ArmUp(m_armSystem),
  //   new Autonomous(0.2, 0.3, m_drivetrain),
  //   new BallSuckSpit(m_intake, -%0.5)
  // );
  // m_chooser.addOption("position2", position2);
  SmartDashboard.putData("Auton", m_chooser);
  try{
  CameraServer.startAutomaticCapture(1);
  }catch(Exception ex1){
    System.out.println("Camera not found");

  }
  //setAngle(240, ahrs.getAngle());
  CameraServer.startAutomaticCapture();
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Button bindings go below
   */
  private void configureButtonBindings() {

    // XboxController()

    // xboxController1.getRawButton(A_BUTTON);

    // new JoystickButton(xboxController1, XboxConstants.RIGHT_BUMPER).whenHeld(new
    // ArmMovement(m_arm, 0.5)); // needs to be fixed
    // new JoystickButton(xboxController1, XboxConstants.LEFT_BUMPER).whenHeld(new
    // ArmMovement(m_arm, -0.5));
    
    // new JoystickButton(xboxController1, XboxConstants.Y_BUTTON).whenHeld(new Autonomous(.30, 5, m_drivetrain));


  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public XboxController getXboxController1() {
    return xboxController1;
  }

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
     return m_chooser.getSelected();

    //return new Autonomous(.5, 10, m_drivetrain);
  
 
  
  }

  
  public void disabledInit() {
    // Reset the arm to up... otherwise it could start in the down direction

  }

  
  public void enabledInit() {
  }
  public void setAngle(double targetAngle, double currentAngle){
      //currentAngle = ahrs.getAngle();
      if (currentAngle >= targetAngle - 20 && currentAngle <= targetAngle + 20){
        System.out.println("Within Target Angle");
      }
      else {
        System.out.println("Not Within Target Angle");
      }
}

}
