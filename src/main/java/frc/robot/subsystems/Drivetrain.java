package frc.robot.subsystems;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// import edu.wpi.first.wpilibj.motorcontrol.MotorController;
// import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;

// import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.SPI;
//import frc.robot.commands.*;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

public class Drivetrain extends SubsystemBase{

    private final WPI_VictorSPX LB_motor = new WPI_VictorSPX(Constants.DriveConstants.kLeftBack);
    private final WPI_VictorSPX LF_motor = new WPI_VictorSPX(Constants.DriveConstants.kLeftFront);
    private final WPI_VictorSPX RB_motor = new WPI_VictorSPX(Constants.DriveConstants.kRightBack);
    private final WPI_VictorSPX RF_motor = new WPI_VictorSPX(Constants.DriveConstants.kRightFront);
    public final DifferentialDrive m_robotDrive = new DifferentialDrive(LF_motor, RF_motor);

    public static AHRS ahrs;
    private static double currentAngle = 0;
    private static double targetYaw = 0;
    private static double currentYaw = 0;
    private static double currentRoll = 0;

    public Drivetrain() {

        LF_motor.setInverted(false);

        RF_motor.setInverted(false);

        LB_motor.follow(LF_motor);
        RB_motor.follow(RF_motor);

        ahrs = new AHRS(SPI.Port.kMXP);




        
    }
    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        currentRoll = ahrs.getRoll();
        currentYaw = ahrs.getYaw();
        targetYaw = -45; /* This number is in degrees : ) */
        SmartDashboard.putNumber("Roll", currentRoll);
        SmartDashboard.putNumber("Yaw", currentYaw);
        if (currentYaw >= targetYaw - 5 && currentYaw <= targetYaw + 5) {
            System.out.println("Within Target Angle");
        }
        else {
            System.out.println("Outside Target Angle");
        }
    }
    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void setMotors(double leftSpeed, double rightSpeed){
        LF_motor.set(leftSpeed);
        RF_motor.set(-rightSpeed);
       //m_robotDrive.arcadeDrive(leftSpeed, rightSpeed);
   }


    
}

